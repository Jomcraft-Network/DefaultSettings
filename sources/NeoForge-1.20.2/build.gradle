plugins {
    id 'net.darkhax.curseforgegradle' version '1.1.18'
	id 'net.neoforged.gradle.userdev' version '7.0.55'
	id 'idea'
    id 'java-library'
}

archivesBaseName = "${rootProject.name}"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
def file_version = version;

version = "1.20.x-${version}-NeoForge"

minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

runs {
    configureEach {

        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', "defaultsettings"
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', "defaultsettings"
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', "defaultsettings"
    }

    data {
        programArguments.addAll '--mod', "defaultsettings", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    implementation "net.neoforged:neoforge:20.2.59-beta"
	implementation("curse.maven:jcp-${project.ext.jcplugin_id}:${project.ext.jcplugin_versions[0]}")
    implementation project(":Core")
}

processResources {
    inputs.property "version", file_version

    filesMatching(["**/fabric.mod.json", "**/mods.toml"]) {
        expand "version": file_version
    }
}

Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
    source(project(":Core").sourceSets.main.allSource)
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    from(project(":Core").sourceSets.main.allSource)
    archiveClassifier = 'sources'
}

jar {
    manifest {
        attributes 'FMLAT': 'accesstransformer.cfg'
    }
}

artifacts {
    archives jar
    archives sourcesJar
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    if (System.getenv("CURSE_API") != null && !System.getenv("CURSE_API").equals("")) {
        disableVersionDetection()
        apiToken = System.getenv("CURSE_API")

        def mainFile = upload(318012, jar)
        mainFile.releaseType = project.ext.relType
        mainFile.displayName = "$archivesBaseName-$version"
        mainFile.changelogType = 'html'
        mainFile.changelog = file('../../changelog.html')
        mainFile.addRequirement('jcplugin')
        mainFile.addModLoader('NeoForge')
        mainFile.addJavaVersion('Java 17')
        mainFile.addGameVersion('1.20.4')
        mainFile.addGameVersion('1.20.3')
        mainFile.addGameVersion('1.20.2')
        mainFile.addGameVersion('Client')

        def sourcesFile = mainFile.withAdditionalFile(sourcesJar)
        sourcesFile.changelog = file('../../changelog.html')
        sourcesFile.addRequirement('jcplugin')
        sourcesFile.displayName = "$archivesBaseName-$version-sources"
    }
}

task("copyRelease") {
    dependsOn "build"

    doFirst {
        println "Gathering builds"
        copy {
            def libDir = project.projectDir.toPath().resolve("build/libs")
            from(libDir) {
                include "*.jar"
                exclude "*-dev.jar", "*-sources.jar"
            }
            into "../../build/libs/"
            duplicatesStrategy DuplicatesStrategy.INCLUDE
        }
    }
}